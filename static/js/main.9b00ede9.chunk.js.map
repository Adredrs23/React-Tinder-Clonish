{"version":3,"sources":["components/Header.js","components/TinderCards.js","components/SwipeButtons.js","components/Chat.js","components/Chats.js","components/ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","IconButton","onClick","replace","fontSize","to","class","src","alt","TinderCards","useState","name","url","people","className","map","person","key","preventSwipe","style","backgroundImage","SwipeButtons","classname","Chat","message","profilePic","timestamp","Avatar","Chats","item","ChatScreen","input","setInput","image","messages","setMessages","type","placeholder","value","onChange","e","target","preventDefault","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"mdAqCeA,MA7Bf,YAAmC,IAAhBC,EAAe,EAAfA,WACTC,EAAUC,cAChB,OACI,gCACMF,EAEE,kBAACG,EAAA,EAAD,CAAYC,QAAW,WAAMH,EAAQI,QAAQL,KACzC,kBAAC,IAAD,CAAkBM,SAAS,WAG/B,kBAACH,EAAA,EAAD,KACI,kBAAC,IAAD,CAAYG,SAAS,WAK7B,kBAAC,IAAD,CAAMC,GAAG,KACL,yBAAKC,MAAM,eAAeC,IAAI,mEAAmEC,IAAI,iBAGzG,kBAAC,IAAD,CAAMH,GAAG,UACL,kBAACJ,EAAA,EAAD,KACI,kBAAC,IAAD,CAAYG,SAAS,c,+BCiC1BK,MA1Df,WAAwB,IAAD,EAEDC,mBAAS,CACvB,CACIC,KAAK,YACLC,IAAI,iGAER,CACID,KAAK,aACLC,IAAI,sHAER,CACID,KAAK,iBACLC,IAAI,2FAER,CACID,KAAK,cACLC,IAAI,mGAfLC,EAFY,oBAgCnB,OACI,6BACI,yBAAKC,UAAU,8BAEPD,EAAOE,KAAI,SAAAC,GACP,OACI,kBAAC,IAAD,CACIF,UAAU,QACVG,IAAKD,EAAOL,KACZO,aAAc,CAAC,KAAK,SAEpB,yBACIC,MAAO,CAACC,gBAAgB,OAAD,OAAQJ,EAAOJ,IAAf,MACvBE,UAAU,QAEV,4BAAKE,EAAOL,c,6FCfjCU,EA1BM,WACjB,OACI,yBAAKP,UAAU,gBACX,kBAACb,EAAA,EAAD,CAAYqB,UAAU,wBAClB,kBAAC,IAAD,CAAalB,SAAS,WAG1B,kBAACH,EAAA,EAAD,CAAYqB,UAAU,sBAClB,kBAAC,IAAD,CAAYlB,SAAS,WAGzB,kBAACH,EAAA,EAAD,CAAYqB,UAAU,uBAClB,kBAAC,IAAD,CAAelB,SAAS,WAG5B,kBAACH,EAAA,EAAD,CAAYqB,UAAU,uBAClB,kBAAC,IAAD,CAAelB,SAAS,WAG5B,kBAACH,EAAA,EAAD,CAAYqB,UAAU,2BAClB,kBAAC,IAAD,CAAclB,SAAS,a,gBCXxBmB,G,MAfF,SAAC,GAAyC,IAAxCZ,EAAuC,EAAvCA,KAAKa,EAAkC,EAAlCA,QAAQC,EAA0B,EAA1BA,WAAWC,EAAe,EAAfA,UACnC,OACI,kBAAC,IAAD,CAAMrB,GAAE,iBAAYM,IAChB,yBAAKG,UAAU,QACX,kBAACa,EAAA,EAAD,CAAQb,UAAU,cAAcP,IAAKkB,IACrC,yBAAKX,UAAU,iBACX,4BAAKH,GACL,2BAAIa,IAER,uBAAGV,UAAU,mBAAmBY,OC0BjCE,EApCD,WAiBV,OACI,yBAAKd,UAAU,SAhBF,CACb,CACIH,KAAK,QACLa,QAAQ,OACRE,UAAU,cACVD,WAAW,2BAEf,CACId,KAAK,QACLa,QAAQ,OACRE,UAAU,cACVD,WAAW,6BAOIV,KAAI,SAAAc,GACX,OACI,kBAAC,EAAD,CACIlB,KAAMkB,EAAKlB,KACXa,QAASK,EAAKL,QACdE,UAAWG,EAAKH,UAChBD,WAAYI,EAAKJ,kB,QCkC9BK,G,MA5DI,WAAO,IAAD,EAEIpB,mBAAS,IAFb,mBAEdqB,EAFc,KAERC,EAFQ,OAIUtB,mBAAS,CACpC,CACIC,KAAK,QACLsB,MAAM,4BACNT,QAAQ,iBAEZ,CACIb,KAAK,QACLsB,MAAM,4BACNT,QAAQ,WACV,CACEA,QAAQ,SAfK,mBAIdU,EAJc,KAILC,EAJK,KA0BrB,OACI,yBAAKrB,UAAU,cACX,uBAAGA,UAAU,yBAAb,qCAGIoB,EAASnB,KAAI,SAAAS,GACL,OACIA,EAAQb,KAGA,yBAAKG,UAAU,uBACX,kBAACa,EAAA,EAAD,CAAQb,UAAU,oBAAoBP,IAAKiB,EAAQS,MAAOzB,IAAKgB,EAAQb,OACvE,uBAAGG,UAAU,oBAAoBU,EAAQA,UAK7C,yBAAKV,UAAU,uBACX,uBAAGA,UAAU,wBAAwBU,EAAQA,aAQzE,0BAAMV,UAAU,qBACZ,2BAAOsB,KAAK,OAAOC,YAAY,iBAAiBvB,UAAU,yBAAyBwB,MAAOP,EAAOQ,SAAU,SAACC,GAAD,OAAKR,EAASQ,EAAEC,OAAOH,UAClI,4BAAQF,KAAK,SAASlC,QAnCf,SAACsC,GAChBA,EAAEE,iBAEFP,EAAY,GAAD,mBAAKD,GAAL,CAAc,CAACV,QAAQO,MAClCC,EAAS,KA+B0ClB,UAAU,2BAArD,Y,MCpBD6B,MA7Bf,WACE,OACE,yBAAK7B,UAAU,OACjB,kBAAC,IAAD,KACC,kBAAC,IAAD,KAEC,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,OAAK,GACpB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAGD,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAK,GACzB,kBAAC,EAAD,CAAQ/C,WAAW,MACnB,kBAAC,EAAD,OAID,kBAAC,IAAD,CAAO8C,KAAK,kBACX,kBAAC,EAAD,CAAQ9C,WAAW,WACnB,kBAAC,EAAD,WCjBegD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvC,c","file":"static/js/main.9b00ede9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport { Link,useHistory } from 'react-router-dom';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nfunction Header( { backButton } ) {\r\n    const history = useHistory();\r\n    return (\r\n        <header>\r\n            { backButton \r\n            ? \r\n                <IconButton onClick = {()=>{ history.replace(backButton)}}>\r\n                    <ArrowBackIosIcon fontSize=\"large\"  /> \r\n                </IconButton>\r\n            :\r\n                <IconButton>\r\n                    <PersonIcon fontSize=\"large\"  /> \r\n                </IconButton>\r\n            }\r\n\r\n            \r\n            <Link to=\"/\">\r\n                <img class=\"header__logo\" src=\"https://1000logos.net/wp-content/uploads/2018/07/tinder-logo.png\" alt=\"Tinder logo\"/>\r\n            </Link>\r\n\r\n            <Link to=\"/chats\">\r\n                <IconButton>\r\n                    <ForumIcon  fontSize=\"large\" />\r\n                </IconButton>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React ,{ useState } from 'react';\r\nimport TinderCard from \"react-tinder-card\";\r\nimport \"./TinderCards.css\";\r\n\r\n\r\nfunction TinderCards() {\r\n\r\n    const [people,] = useState([\r\n        {\r\n            name:\"Elon Musk\",\r\n            url:\"https://www.biography.com/.image/t_share/MTY2MzU3Nzk2OTM2MjMwNTkx/elon_musk_royal_society.jpg\"\r\n        },\r\n        {\r\n            name:\"Jeff Bezos\",\r\n            url:\"https://image.cnbcfm.com/api/v1/image/106569797-1591649109683gettyimages-1032942656.jpeg?v=1595348125&w=1400&h=950\"\r\n        },\r\n        {\r\n            name:\"Shah Rukh Khan\",\r\n            url:\"https://i.zoomtventertainment.com/story/Shah_Rukh_Khan_image.jpg?tr=w-400,h-300,fo-auto\"\r\n        },\r\n        {\r\n            name:\"Johnny Depp\",\r\n            url:\"https://m.media-amazon.com/images/M/MV5BMTM0ODU5Nzk2OV5BMl5BanBnXkFtZTcwMzI2ODgyNQ@@._V1_.jpg\"\r\n        },\r\n    ]);\r\n\r\n\r\n    // useEffect(() => {\r\n    //     const unsubscribe = database.collection('people').onSnapshot(snapshot=>{\r\n    //         setPeople( snapshot.docs.map(doc=>doc.data()) )\r\n    //     });\r\n\r\n    //     return ()=>{\r\n    //         unsubscribe();\r\n    //     }\r\n    // }, [])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"tinderCards__cardContainer\">\r\n                {\r\n                    people.map(person=>{\r\n                        return (\r\n                            <TinderCard\r\n                                className=\"swipe\"\r\n                                key={person.name}\r\n                                preventSwipe={[\"up\",\"down\"]}\r\n                                >\r\n                                <div\r\n                                    style={{backgroundImage:`url(${person.url})`}}\r\n                                    className=\"card\"\r\n                                    >\r\n                                    <h3>{person.name}</h3>\r\n                                </div>\r\n                            </TinderCard>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TinderCards\r\n","import React from 'react';\r\nimport './SwipeButtons.css';\r\nimport ReplayIcon from \"@material-ui/icons/Replay\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport FlashOnIcon from \"@material-ui/icons/FlashOn\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\n\r\n\r\nconst SwipeButtons = () => {\r\n    return (\r\n        <div className=\"swipeButtons\">\r\n            <IconButton classname=\"swipeButtons__repeat\">\r\n                <ReplayIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n            \r\n            <IconButton classname=\"swipeButtons__left\">\r\n                <CloseIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n            <IconButton classname=\"swipeButtons__start\">\r\n                <StarRateIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n            <IconButton classname=\"swipeButtons__right\">\r\n                <FavoriteIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n            <IconButton classname=\"swipeButtons__lightning\">\r\n                <FlashOnIcon  fontSize=\"large\" />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SwipeButtons\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport {Link} from 'react-router-dom';\r\nimport './Chat.css'\r\n\r\nconst Chat = ({name,message,profilePic,timestamp}) => {\r\n    return (\r\n        <Link to={`/chats/${name}`}>\r\n            <div className=\"chat\">\r\n                <Avatar className=\"chat__image\" src={profilePic} />\r\n                <div className=\"chat__details\">\r\n                    <h2>{name}</h2>\r\n                    <p>{message}</p>\r\n                </div>\r\n                <p className=\"chat__timestamp\">{timestamp}</p>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","import React from 'react';\r\nimport './Chats.css';\r\nimport Chat from \"./Chat\"\r\n\r\nconst Chats = () => {\r\n\r\n    let chatPeople = [\r\n        {\r\n            name:'user1',\r\n            message:'test',\r\n            timestamp:'35 mins ago',\r\n            profilePic:'https://robohash.org/as'\r\n        },\r\n        {\r\n            name:'user2',\r\n            message:'test',\r\n            timestamp:'35 mins ago',\r\n            profilePic:'https://robohash.org/ass'\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div className=\"chats\">\r\n            {\r\n                chatPeople.map(item=>{\r\n                    return (\r\n                        <Chat \r\n                            name={item.name}\r\n                            message={item.message}\r\n                            timestamp={item.timestamp}\r\n                            profilePic={item.profilePic}\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats\r\n","import React,{useState} from 'react';\r\nimport \"./ChatScreen.css\";\r\nimport Avatar from '@material-ui/core/Avatar'\r\n\r\nconst ChatScreen = () => {\r\n\r\n    const [input,setInput] = useState('');\r\n\r\n    const [messages,setMessages] = useState([\r\n        {\r\n            name:\"Ellen\",\r\n            image:\"https://robohash.org/asdf\",\r\n            message:\"whats ssasdip\"\r\n        },\r\n        {\r\n            name:\"Ellen\",\r\n            image:\"https://robohash.org/asdf\",\r\n            message:\"U fine?\"\r\n        },{\r\n            message:\"yup\"\r\n        }\r\n    ]);\r\n\r\n    const handleSend = (e) =>{\r\n        e.preventDefault();\r\n\r\n        setMessages([...messages,{message:input}])\r\n        setInput(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className=\"chatScreen\">\r\n            <p className=\"chatScreen__timestamp\">YOU MATCHED WIH ELLEN ON 10/08/20</p>\r\n\r\n            {\r\n                messages.map(message => {\r\n                        return (\r\n                            message.name \r\n                            ?\r\n                                (\r\n                                    <div className=\"chatScreen__message\">\r\n                                        <Avatar className=\"chatScreen__image\" src={message.image} alt={message.name} />\r\n                                        <p className=\"chatScreen__text\">{message.message}</p>\r\n                                    </div>\r\n                                )\r\n                            :\r\n                                (\r\n                                    <div className=\"chatScreen__message\">\r\n                                        <p className=\"chatScreen__textUser\">{message.message}</p>\r\n                                    </div>\r\n                                )\r\n                        )\r\n                    })\r\n            }\r\n\r\n            \r\n            <form className=\"chatScreen__input\">\r\n                <input type=\"text\" placeholder='Type a message' className=\"chatScreen__inputField\" value={input} onChange={(e)=>setInput(e.target.value)}/>\r\n                <button type=\"submit\" onClick={handleSend} className=\"chatScreen__inputButton\">SEND</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatScreen\r\n","import React from 'react';\nimport Header from \"./components/Header\";\nimport TinderCards from './components/TinderCards';\nimport SwipeButtons from './components/SwipeButtons';\nimport Chats from \"./components/Chats\";\nimport ChatScreen from \"./components/ChatScreen\";\nimport {BrowserRouter as Router,Switch ,Route} from 'react-router-dom';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t\t<Router>\n\t\t\t<Switch>\n\n\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t<Header/>\n\t\t\t\t\t<TinderCards />\n\t\t\t\t\t<SwipeButtons />\n\t\t\t\t</Route>\n\n\t\t\t\t<Route path=\"/chats\" exact>\n\t\t\t\t\t<Header backButton=\"/\" />\n\t\t\t\t\t<Chats />\n\t\t\t\t</Route>\n\n\t\t\t\t\n\t\t\t\t<Route path=\"/chats/:person\">\n\t\t\t\t\t<Header backButton=\"/chats\" />\n\t\t\t\t\t<ChatScreen />\n\t\t\t\t</Route>\n\n\t\t\t</Switch>\n\t\t</Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}